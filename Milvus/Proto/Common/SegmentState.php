<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: common.proto

namespace Milvus\Proto\Common;

use UnexpectedValueException;

/**
 * Protobuf type <code>milvus.proto.common.SegmentState</code>
 */
class SegmentState
{
    /**
     * Generated from protobuf enum <code>SegmentStateNone = 0;</code>
     */
    const SegmentStateNone = 0;
    /**
     * Generated from protobuf enum <code>NotExist = 1;</code>
     */
    const NotExist = 1;
    /**
     * Generated from protobuf enum <code>Growing = 2;</code>
     */
    const Growing = 2;
    /**
     * Generated from protobuf enum <code>Sealed = 3;</code>
     */
    const Sealed = 3;
    /**
     * Generated from protobuf enum <code>Flushed = 4;</code>
     */
    const Flushed = 4;
    /**
     * Generated from protobuf enum <code>Flushing = 5;</code>
     */
    const Flushing = 5;
    /**
     * Generated from protobuf enum <code>Dropped = 6;</code>
     */
    const Dropped = 6;
    /**
     * Generated from protobuf enum <code>Importing = 7;</code>
     */
    const Importing = 7;

    private static $valueToName = [
        self::SegmentStateNone => 'SegmentStateNone',
        self::NotExist => 'NotExist',
        self::Growing => 'Growing',
        self::Sealed => 'Sealed',
        self::Flushed => 'Flushed',
        self::Flushing => 'Flushing',
        self::Dropped => 'Dropped',
        self::Importing => 'Importing',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

