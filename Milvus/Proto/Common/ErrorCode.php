<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: common.proto

namespace Milvus\Proto\Common;

use UnexpectedValueException;

/**
 * Deprecated
 *
 * Protobuf type <code>milvus.proto.common.ErrorCode</code>
 */
class ErrorCode
{
    /**
     * Generated from protobuf enum <code>Success = 0;</code>
     */
    const Success = 0;
    /**
     * Generated from protobuf enum <code>UnexpectedError = 1;</code>
     */
    const UnexpectedError = 1;
    /**
     * Generated from protobuf enum <code>ConnectFailed = 2;</code>
     */
    const ConnectFailed = 2;
    /**
     * Generated from protobuf enum <code>PermissionDenied = 3;</code>
     */
    const PermissionDenied = 3;
    /**
     * Generated from protobuf enum <code>CollectionNotExists = 4;</code>
     */
    const CollectionNotExists = 4;
    /**
     * Generated from protobuf enum <code>IllegalArgument = 5;</code>
     */
    const IllegalArgument = 5;
    /**
     * Generated from protobuf enum <code>IllegalDimension = 7;</code>
     */
    const IllegalDimension = 7;
    /**
     * Generated from protobuf enum <code>IllegalIndexType = 8;</code>
     */
    const IllegalIndexType = 8;
    /**
     * Generated from protobuf enum <code>IllegalCollectionName = 9;</code>
     */
    const IllegalCollectionName = 9;
    /**
     * Generated from protobuf enum <code>IllegalTOPK = 10;</code>
     */
    const IllegalTOPK = 10;
    /**
     * Generated from protobuf enum <code>IllegalRowRecord = 11;</code>
     */
    const IllegalRowRecord = 11;
    /**
     * Generated from protobuf enum <code>IllegalVectorID = 12;</code>
     */
    const IllegalVectorID = 12;
    /**
     * Generated from protobuf enum <code>IllegalSearchResult = 13;</code>
     */
    const IllegalSearchResult = 13;
    /**
     * Generated from protobuf enum <code>FileNotFound = 14;</code>
     */
    const FileNotFound = 14;
    /**
     * Generated from protobuf enum <code>MetaFailed = 15;</code>
     */
    const MetaFailed = 15;
    /**
     * Generated from protobuf enum <code>CacheFailed = 16;</code>
     */
    const CacheFailed = 16;
    /**
     * Generated from protobuf enum <code>CannotCreateFolder = 17;</code>
     */
    const CannotCreateFolder = 17;
    /**
     * Generated from protobuf enum <code>CannotCreateFile = 18;</code>
     */
    const CannotCreateFile = 18;
    /**
     * Generated from protobuf enum <code>CannotDeleteFolder = 19;</code>
     */
    const CannotDeleteFolder = 19;
    /**
     * Generated from protobuf enum <code>CannotDeleteFile = 20;</code>
     */
    const CannotDeleteFile = 20;
    /**
     * Generated from protobuf enum <code>BuildIndexError = 21;</code>
     */
    const BuildIndexError = 21;
    /**
     * Generated from protobuf enum <code>IllegalNLIST = 22;</code>
     */
    const IllegalNLIST = 22;
    /**
     * Generated from protobuf enum <code>IllegalMetricType = 23;</code>
     */
    const IllegalMetricType = 23;
    /**
     * Generated from protobuf enum <code>OutOfMemory = 24;</code>
     */
    const OutOfMemory = 24;
    /**
     * Generated from protobuf enum <code>IndexNotExist = 25;</code>
     */
    const IndexNotExist = 25;
    /**
     * Generated from protobuf enum <code>EmptyCollection = 26;</code>
     */
    const EmptyCollection = 26;
    /**
     * Generated from protobuf enum <code>UpdateImportTaskFailure = 27;</code>
     */
    const UpdateImportTaskFailure = 27;
    /**
     * Generated from protobuf enum <code>CollectionNameNotFound = 28;</code>
     */
    const CollectionNameNotFound = 28;
    /**
     * Generated from protobuf enum <code>CreateCredentialFailure = 29;</code>
     */
    const CreateCredentialFailure = 29;
    /**
     * Generated from protobuf enum <code>UpdateCredentialFailure = 30;</code>
     */
    const UpdateCredentialFailure = 30;
    /**
     * Generated from protobuf enum <code>DeleteCredentialFailure = 31;</code>
     */
    const DeleteCredentialFailure = 31;
    /**
     * Generated from protobuf enum <code>GetCredentialFailure = 32;</code>
     */
    const GetCredentialFailure = 32;
    /**
     * Generated from protobuf enum <code>ListCredUsersFailure = 33;</code>
     */
    const ListCredUsersFailure = 33;
    /**
     * Generated from protobuf enum <code>GetUserFailure = 34;</code>
     */
    const GetUserFailure = 34;
    /**
     * Generated from protobuf enum <code>CreateRoleFailure = 35;</code>
     */
    const CreateRoleFailure = 35;
    /**
     * Generated from protobuf enum <code>DropRoleFailure = 36;</code>
     */
    const DropRoleFailure = 36;
    /**
     * Generated from protobuf enum <code>OperateUserRoleFailure = 37;</code>
     */
    const OperateUserRoleFailure = 37;
    /**
     * Generated from protobuf enum <code>SelectRoleFailure = 38;</code>
     */
    const SelectRoleFailure = 38;
    /**
     * Generated from protobuf enum <code>SelectUserFailure = 39;</code>
     */
    const SelectUserFailure = 39;
    /**
     * Generated from protobuf enum <code>SelectResourceFailure = 40;</code>
     */
    const SelectResourceFailure = 40;
    /**
     * Generated from protobuf enum <code>OperatePrivilegeFailure = 41;</code>
     */
    const OperatePrivilegeFailure = 41;
    /**
     * Generated from protobuf enum <code>SelectGrantFailure = 42;</code>
     */
    const SelectGrantFailure = 42;
    /**
     * Generated from protobuf enum <code>RefreshPolicyInfoCacheFailure = 43;</code>
     */
    const RefreshPolicyInfoCacheFailure = 43;
    /**
     * Generated from protobuf enum <code>ListPolicyFailure = 44;</code>
     */
    const ListPolicyFailure = 44;
    /**
     * Generated from protobuf enum <code>NotShardLeader = 45;</code>
     */
    const NotShardLeader = 45;
    /**
     * Generated from protobuf enum <code>NoReplicaAvailable = 46;</code>
     */
    const NoReplicaAvailable = 46;
    /**
     * Generated from protobuf enum <code>SegmentNotFound = 47;</code>
     */
    const SegmentNotFound = 47;
    /**
     * Generated from protobuf enum <code>ForceDeny = 48;</code>
     */
    const ForceDeny = 48;
    /**
     * Generated from protobuf enum <code>RateLimit = 49;</code>
     */
    const RateLimit = 49;
    /**
     * Generated from protobuf enum <code>NodeIDNotMatch = 50;</code>
     */
    const NodeIDNotMatch = 50;
    /**
     * Generated from protobuf enum <code>UpsertAutoIDTrue = 51;</code>
     */
    const UpsertAutoIDTrue = 51;
    /**
     * Generated from protobuf enum <code>InsufficientMemoryToLoad = 52;</code>
     */
    const InsufficientMemoryToLoad = 52;
    /**
     * Generated from protobuf enum <code>MemoryQuotaExhausted = 53;</code>
     */
    const MemoryQuotaExhausted = 53;
    /**
     * Generated from protobuf enum <code>DiskQuotaExhausted = 54;</code>
     */
    const DiskQuotaExhausted = 54;
    /**
     * Generated from protobuf enum <code>TimeTickLongDelay = 55;</code>
     */
    const TimeTickLongDelay = 55;
    /**
     * Generated from protobuf enum <code>NotReadyServe = 56;</code>
     */
    const NotReadyServe = 56;
    /**
     * Coord is switching from standby mode to active mode
     *
     * Generated from protobuf enum <code>NotReadyCoordActivating = 57;</code>
     */
    const NotReadyCoordActivating = 57;
    /**
     * Service availability.
     * NA: Not Available.
     *
     * Generated from protobuf enum <code>DataCoordNA = 100;</code>
     */
    const DataCoordNA = 100;
    /**
     * internal error code.
     *
     * Generated from protobuf enum <code>DDRequestRace = 1000;</code>
     */
    const DDRequestRace = 1000;

    private static $valueToName = [
        self::Success => 'Success',
        self::UnexpectedError => 'UnexpectedError',
        self::ConnectFailed => 'ConnectFailed',
        self::PermissionDenied => 'PermissionDenied',
        self::CollectionNotExists => 'CollectionNotExists',
        self::IllegalArgument => 'IllegalArgument',
        self::IllegalDimension => 'IllegalDimension',
        self::IllegalIndexType => 'IllegalIndexType',
        self::IllegalCollectionName => 'IllegalCollectionName',
        self::IllegalTOPK => 'IllegalTOPK',
        self::IllegalRowRecord => 'IllegalRowRecord',
        self::IllegalVectorID => 'IllegalVectorID',
        self::IllegalSearchResult => 'IllegalSearchResult',
        self::FileNotFound => 'FileNotFound',
        self::MetaFailed => 'MetaFailed',
        self::CacheFailed => 'CacheFailed',
        self::CannotCreateFolder => 'CannotCreateFolder',
        self::CannotCreateFile => 'CannotCreateFile',
        self::CannotDeleteFolder => 'CannotDeleteFolder',
        self::CannotDeleteFile => 'CannotDeleteFile',
        self::BuildIndexError => 'BuildIndexError',
        self::IllegalNLIST => 'IllegalNLIST',
        self::IllegalMetricType => 'IllegalMetricType',
        self::OutOfMemory => 'OutOfMemory',
        self::IndexNotExist => 'IndexNotExist',
        self::EmptyCollection => 'EmptyCollection',
        self::UpdateImportTaskFailure => 'UpdateImportTaskFailure',
        self::CollectionNameNotFound => 'CollectionNameNotFound',
        self::CreateCredentialFailure => 'CreateCredentialFailure',
        self::UpdateCredentialFailure => 'UpdateCredentialFailure',
        self::DeleteCredentialFailure => 'DeleteCredentialFailure',
        self::GetCredentialFailure => 'GetCredentialFailure',
        self::ListCredUsersFailure => 'ListCredUsersFailure',
        self::GetUserFailure => 'GetUserFailure',
        self::CreateRoleFailure => 'CreateRoleFailure',
        self::DropRoleFailure => 'DropRoleFailure',
        self::OperateUserRoleFailure => 'OperateUserRoleFailure',
        self::SelectRoleFailure => 'SelectRoleFailure',
        self::SelectUserFailure => 'SelectUserFailure',
        self::SelectResourceFailure => 'SelectResourceFailure',
        self::OperatePrivilegeFailure => 'OperatePrivilegeFailure',
        self::SelectGrantFailure => 'SelectGrantFailure',
        self::RefreshPolicyInfoCacheFailure => 'RefreshPolicyInfoCacheFailure',
        self::ListPolicyFailure => 'ListPolicyFailure',
        self::NotShardLeader => 'NotShardLeader',
        self::NoReplicaAvailable => 'NoReplicaAvailable',
        self::SegmentNotFound => 'SegmentNotFound',
        self::ForceDeny => 'ForceDeny',
        self::RateLimit => 'RateLimit',
        self::NodeIDNotMatch => 'NodeIDNotMatch',
        self::UpsertAutoIDTrue => 'UpsertAutoIDTrue',
        self::InsufficientMemoryToLoad => 'InsufficientMemoryToLoad',
        self::MemoryQuotaExhausted => 'MemoryQuotaExhausted',
        self::DiskQuotaExhausted => 'DiskQuotaExhausted',
        self::TimeTickLongDelay => 'TimeTickLongDelay',
        self::NotReadyServe => 'NotReadyServe',
        self::NotReadyCoordActivating => 'NotReadyCoordActivating',
        self::DataCoordNA => 'DataCoordNA',
        self::DDRequestRace => 'DDRequestRace',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

