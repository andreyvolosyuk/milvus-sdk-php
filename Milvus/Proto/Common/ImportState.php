<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: common.proto

namespace Milvus\Proto\Common;

use UnexpectedValueException;

/**
 * Protobuf type <code>milvus.proto.common.ImportState</code>
 */
class ImportState
{
    /**
     * the task in in pending list of rootCoord, waiting to be executed
     *
     * Generated from protobuf enum <code>ImportPending = 0;</code>
     */
    const ImportPending = 0;
    /**
     * the task failed for some reason, get detail reason from GetImportStateResponse.infos
     *
     * Generated from protobuf enum <code>ImportFailed = 1;</code>
     */
    const ImportFailed = 1;
    /**
     * the task has been sent to datanode to execute
     *
     * Generated from protobuf enum <code>ImportStarted = 2;</code>
     */
    const ImportStarted = 2;
    /**
     * all data files have been parsed and all meta data already persisted, ready to be flushed.
     *
     * Generated from protobuf enum <code>ImportPersisted = 5;</code>
     */
    const ImportPersisted = 5;
    /**
     * all segments are successfully flushed.
     *
     * Generated from protobuf enum <code>ImportFlushed = 8;</code>
     */
    const ImportFlushed = 8;
    /**
     * all indexes are successfully built and segments are able to be compacted as normal.
     *
     * Generated from protobuf enum <code>ImportCompleted = 6;</code>
     */
    const ImportCompleted = 6;
    /**
     * the task failed and all segments it generated are cleaned up.
     *
     * Generated from protobuf enum <code>ImportFailedAndCleaned = 7;</code>
     */
    const ImportFailedAndCleaned = 7;

    private static $valueToName = [
        self::ImportPending => 'ImportPending',
        self::ImportFailed => 'ImportFailed',
        self::ImportStarted => 'ImportStarted',
        self::ImportPersisted => 'ImportPersisted',
        self::ImportFlushed => 'ImportFlushed',
        self::ImportCompleted => 'ImportCompleted',
        self::ImportFailedAndCleaned => 'ImportFailedAndCleaned',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

